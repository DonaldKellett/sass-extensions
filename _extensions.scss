@function round-to($n, $d) {
  @return round($n * pow(10, $d)) / pow(10, $d);
}
@function trunc($n) {
  @return if($n < 0, ceil($n), floor($n));
}
@function exp($x) {
  @return pow(e(),$x);
}
@function rand-int($min: 0, $max: 100) {
  @return $min + floor(random() * ($max - $min + 1));
}
@function str-to-char-list($s) {
  @if str-length($s) == 0 {@return "";}
  $list: ();
  @for $i from 1 through str-length($s) {
    $list: append($list, str-slice($s, $i, $i), comma);
  }
  @return $list;
}
@function repeat-str($s, $t) {
  @if ($t == 0) {@return "";}
  @if ($t == 1) {@return $s;}
  $result: "";
  @for $i from 1 through $t {
    $result: $result + $s;
  }
  @return $result;
}
@function list-join($list, $separator) {
  @if length($list) == 0 {@return "";}
  @if length($list) == 1 {@return nth($list, 1);}
  $result: nth($list, 1);
  @for $i from 2 through length($list) {
    $result: $result + $separator;
    $result: $result + nth($list, $i);
  }
  @return $result;
}
@function list-map($list, $fn) {
  $result: ();
  @each $item in $list {
    $result: append($result, call($fn, $item), comma);
  }
  @return $result;
}
@function list-reduce($list, $fn, $init: null) {
  @if $init == null {
    @if length($list) == 0 {@return null;}
    @if length($list) == 1 {@return nth($list, 1);}
    $result: nth($list, 1);
    @for $i from 2 through length($list) {
      $result: call($fn, $result, nth($list, $i));
    }
    @return $result;
  } @else {
    $result: $init;
    @each $item in $list {
      $result: call($fn, $result, $item);
    }
    @return $result;
  }
}
@function bubblesort($list) {
  @if length($list) == 1 {@return $list;}
  $copy: $list;
  @for $i from length($copy) - 1 through 1 {
    @for $j from 1 through $i {
      @if nth($copy, $j) > nth($copy, $j + 1) {
        $temp: nth($copy, $j);
        $copy: set-nth($copy, $j, nth($copy, $j + 1));
        $copy: set-nth($copy, $j + 1, $temp);
      }
    }
  }
  @return $copy;
}
